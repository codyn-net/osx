#!/bin/bash

dont_setup_brew=1
source $(dirname "$0")/env

root=.sources
noconfigure=
verbose=
libonly=
debug=

while getopts ":nvhld" opt; do
	case $opt in
		n)
			noconfigure=1
		;;
		v)
			verbose=1
		;;
		l)
			libonly=1
		;;
		d)
			debug=1
		;;
		h)
			echo "";
			echo "Usage: $0 [OPTIONS] [<targets>]";
			echo "";
			echo "Build all, or a subset of, codyn components. Valid targets are \`codyn', \`codyn_mono', \`codyn_sharp', \`rawc' and \`studio'. If no targets are specified, then all components will be built.";
			echo "";
			echo "Options:";
			echo "  -n    Do not run configure, only make";
			echo "  -v    Be verbose";
			echo "  -l    Only build library (valid only for codyn or codyn_mono target)";
			echo "  -d    Debug builds";
			echo "  -h    Show this help message";
			echo "";
			exit 1;
		;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
		;;
	esac
done

shift $((OPTIND-1))

function build
{
	args="--prefix=$prefix"

	bdir="$1"
	shift 1

	if [ -f "$bdir/autogen.sh" ]; then
		configure="autogen.sh"
	elif [ -f "$bdir/configure" ]; then
		configure="configure"
	else
		echo "Neither autogen.sh nor configure could be found"
		exit 1
	fi

	if [ ! -z "$verbose" ]; then
		tmp=/dev/stdout
	else
		tmp=$(mktemp -t codyn-build)
	fi

	if [ ! -z "$CODYN_SHELL" ]; then
		(cd "$bdir" && echo "./$configure $args $@" && echo "make install DESTDIR=\"$destdir\"" && bash)
		retval=$?
	else
		retval=0

		if [ -z "$noconfigure" ]; then
			(cd "$bdir" && ./$configure $args "$@" && make clean) &>$tmp;
			retval=$?
		fi

		if [ ! -z "$libonly" ] && [ $bdir == "$root/codyn" ]; then
			bdir="$bdir/codyn";
		fi

		if [ $retval -eq 0 ]; then
			(cd "$bdir" && make -j8 && make install DESTDIR="$destdir") 2>&1 >> $tmp;
			retval=$?
		fi
	fi

	if [ -z "$verbose" ]; then
		if [ $retval -ne 0 ]; then
			cat "$tmp"
		fi

		rm "$tmp"
	fi

	return $retval
}

# This function sets up an environment suitable for compiling against the
# mono framework provided libraries
function mono_env
{
	fw="/Library/Frameworks/Mono.framework"
	fwroot="$fw/Versions/Current"

	# install in .install-mono
	destdir="$d/.install-mono"
	prefix="/Library/Frameworks/Codyn.framework/Resources/mono"

	export PKG_CONFIG_PATH="$fwroot/lib/pkgconfig:$destdir$prefix/lib/pkgconfig:$PKG_CONFIG_PATH"
	export PATH="$fwroot/bin:$PATH"
}

codyn_dir="$root/codyn"
cdnsharp_dir="$root/codyn-sharp"
cdnrawc_dir="$root/rawc"
studio_dir="$root/studio"

function build_codyn
{(
	if [ ! -d "$codyn_dir" ]; then
		echo "Could not find the codyn sources in $codyn_dir..."
		exit 1
	fi

	export CFLAGS='-arch i386 -arch x86_64 -mmacosx-version-min=10.6 -isysroot /Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk'
	export LDFLAGS='-arch i386 -arch x86_64 -isysroot /Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk'

	# Setup full brew environment
	unset dont_setup_brew
	source $(dirname "$0")/env

	export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$b/Cellar/libffi/3.0.13/lib/pkgconfig"

	# install in .install
	destdir="$d/.install"

	echo "Building codyn..."

	if [ ! -z "$debug" ]; then
		build "$codyn_dir" --disable-dependency-tracking --enable-framework --enable-debug || exit 1
	else
		build "$codyn_dir" --disable-dependency-tracking --enable-framework || exit 1
	fi
) || exit 1;}

function build_codyn_mono
{(
	if [ ! -d "$codyn_dir" ]; then
		echo "Could not find the codyn sources in $codyn_dir..."
		exit 1
	fi

	# Build codyn library but for use with mono. This means building just
	# 32 bits and using the mono provided glib libraries
	export CFLAGS='-arch i386 -mmacosx-version-min=10.6 -isysroot /Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk'
	export LDFLAGS='-arch i386 -isysroot /Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk'

	mono_env

	# Build codyn also again specifically for use with mono
	echo "Building codyn for mono..."

	# Build with datadir set to the real codyn framework data dir so they
	# still use the same library etc
	build "$root/codyn" --datadir="/Library/Frameworks/Codyn.framework/Resources/share" || exit 1
) || exit 1;}

function build_codyn_sharp
{(
	mono_env

	echo "Building codyn sharp..."
	build "$cdnsharp_dir" --enable-release || exit 1
) || exit 1;}

function build_rawc
{(
	if [ ! -d "$cdnrawc_dir" ]; then
		echo "Could not find the rawc sources in $cdnrawc_dir..."
		exit 1
	fi

	export CFLAGS='-arch i386 -arch x86_64 -mmacosx-version-min=10.6 -isysroot /Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk'
	export LDFLAGS='-arch i386 -arch x86_64 -isysroot /Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk'

	mono_env
	pf="$d/.install-mono/Library/Frameworks/Codyn.framework/Resources/mono"

	echo "Building rawc in $cdnrawc_dir..."
	build "$cdnrawc_dir" --enable-release --disable-dependency-tracking --with-framework="$pf" || exit 1
) || exit 1;}

function build_studio
{(
	if [ ! -d "$studio_dir" ]; then
		echo "Could not find the studio sources in $studio_dir..."
		exit 1
	fi

	biorobmath_dir="$root/biorob-math-sharp"

	if [ ! -d "$biorobmath_dir" ]; then
		echo "Could not find the biorob-math-sharp sources in $biorobmath_dir..."
		exit 1
	fi

	plotsharp_dir="$root/plot-sharp"

	if [ ! -d "$plotsharp_dir" ]; then
		echo "Could not find the plot-sharp sources in $plotsharp_dir..."
		exit 1
	fi

	mono_env

	pf="$d/.install-mono/Library/Frameworks/Codyn.framework/Resources/mono"

	echo "Building biorob math sharp"
	build "$biorobmath_dir" --enable-release || exit 1

	echo "Building plot sharp"
	build "$plotsharp_dir" --enable-release --with-framework="$pf" || exit 1

	echo "Building studio"
	build "$studio_dir" --enable-release --with-framework="$pf" || exit 1
) || exit 1;}

if [ -z "$1" ]; then
	builds="codyn codyn_mono"

	if [ -d "$cdnsharp_dir" ]; then
		builds="$builds codyn_sharp"
	fi

	if [ -d "$cdnrawc_dir" ]; then
		builds="$builds rawc"
	fi

	if [ -d "$studio_dir" ]; then
		builds="$builds studio"
	fi
else
	builds="$@"
fi

for b in $builds; do
	build_${b}
done
