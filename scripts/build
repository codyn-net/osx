#!/bin/bash

dont_setup_brew=1
source $(dirname "$0")/env

root=..

function build
{
	args="--prefix=$prefix"

	bdir="$1"
	shift 1

	if [ -f "$bdir/autogen.sh" ]; then
		configure="autogen.sh"
	elif [ -f "$bdir/configure" ]; then
		configure="configure"
	else
		echo "Neither autogen.sh nor configure could be found"
		exit 1
	fi

	tmp=$(mktemp -t codyn-build)

	(cd "$bdir" && ./$configure $args "$@" && make clean && make -j8 && make install DESTDIR="$destdir") &>$tmp

	retval=$?

	if [ $retval -ne 0 ]; then
		cat "$tmp"
	fi

	rm "$tmp"
	return $retval
}

# This function sets up an environment suitable for compiling against the
# mono framework provided libraries
function mono_env
{
	fw="/Library/Frameworks/Mono.framework"
	fwroot="$fw/Versions/Current"

	# install in .install-mono
	destdir="$d/.install-mono"
	prefix="/Library/Frameworks/Codyn.framework/Resources/mono"

	export PKG_CONFIG_PATH="$fwroot/lib/pkgconfig:$destdir$prefix/lib/pkgconfig:$PKG_CONFIG_PATH"
	export PATH="$fwroot/bin:$PATH"
}

codyn_dir="$root/codyn"
cdnsharp_dir="$root/codyn-sharp"
cdnrawc_dir="$root/rawc"
studio_dir="$root/studio"

function build_codyn
{(
	if [ ! -d "$codyn_dir" ]; then
		echo "Could not find the codyn sources in $codyn_dir..."
		exit 1
	fi

	export CFLAGS='-arch i386 -arch x86_64'
	export LDFLAGS='-arch i386 -arch x86_64'

	# Setup full brew environment
	unset dont_setup_brew
	source $(dirname "$0")/env

	export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$b/Cellar/libffi/3.0.13/lib/pkgconfig"

	# install in .install
	destdir="$d/.install"

	echo "Building codyn..."
	build "$codyn_dir" --disable-dependency-tracking --enable-framework || exit 1
) || exit 1;}

function build_codyn_mono
{(
	if [ ! -d "$codyn_dir" ]; then
		echo "Could not find the codyn sources in $codyn_dir..."
		exit 1
	fi

	# Build codyn library but for use with mono. This means building just
	# 32 bits and using the mono provided glib libraries
	export CFLAGS='-arch i386'
	export LDFLAGS='-arch i386'

	mono_env

	# Build codyn also again specifically for use with mono
	echo "Building codyn for mono..."

	# Build with datadir set to the real codyn framework data dir so they
	# still use the same library etc
	build "$root/codyn" --datadir="/Library/Frameworks/Codyn.framework/Resources/share" || exit 1
) || exit 1;}

function build_codyn_sharp
{(
	mono_env

	echo "Building codyn sharp..."
	build "$cdnsharp_dir" --enable-release || exit 1
) || exit 1;}

function build_rawc
{(
	if [ ! -d "$cdnrawc_dir" ]; then
		echo "Could not find the rawc sources in $cdnrawc_dir..."
		exit 1
	fi

	export CFLAGS='-arch i386 -arch x86_64'
	export LDFLAGS='-arch i386 -arch x86_64'

	mono_env
	pf="$d/.install-mono/Library/Frameworks/Codyn.framework/Resources/mono"

	echo "Building rawc in $cdnrawc_dir..."
	build "$cdnrawc_dir" --enable-release --disable-dependency-tracking --with-framework="$pf" || exit 1
) || exit 1;}

function build_studio
{(
	if [ ! -d "$studio_dir" ]; then
		echo "Could not find the studio sources in $studio_dir..."
		exit 1
	fi

	biorobmath_dir="$root/biorob-math-sharp"

	if [ ! -d "$biorobmath_dir" ]; then
		echo "Could not find the biorob-math-sharp sources in $biorobmath_dir..."
		exit 1
	fi

	plotsharp_dir="$root/plot-sharp"

	if [ ! -d "$plotsharp_dir" ]; then
		echo "Could not find the plot-sharp sources in $plotsharp_dir..."
		exit 1
	fi

	mono_env

	pf="$d/.install-mono/Library/Frameworks/Codyn.framework/Resources/mono"

	echo "Building biorob math sharp"
	build "$biorobmath_dir" --enable-release || exit 1

	echo "Building plot sharp"
	build "$plotsharp_dir" --enable-release --with-framework="$pf" || exit 1

	echo "Building studio"
	build "$studio_dir" --enable-release --with-framework="$pf" || exit 1
) || exit 1;}

if [ -z "$@" ]; then
	builds="codyn codyn_mono"

	if [ -d "$cdnsharp_dir" ]; then
		builds="$builds codyn_sharp"
	fi

	if [ -d "$cdnrawc_dir" ]; then
		builds="$builds rawc"
	fi

	if [ -d "$studio_dir" ]; then
		builds="$builds studio"
	fi
else
	builds="$@"
fi

for b in $builds; do
	build_${b}
done
